#!/usr/bin/env node

/**
 * Script para testar as estat√≠sticas do dashboard
 * Verifica se os endpoints est√£o funcionando e retornando dados corretos
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001/api';

// Simular um token JWT v√°lido (voc√™ pode gerar um real se necess√°rio)
const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTczMzY5NzYwMCwiZXhwIjoxNzM0MzAxNjAwfQ.example';

async function testDashboardStats() {
  console.log('üß™ Testando Estat√≠sticas do Dashboard...\n');

  try {
    // Testar endpoint de materiais
    console.log('üì¶ Testando endpoint de materiais...');
    const materiaisResponse = await axios.get(`${API_BASE_URL}/materials`, {
      headers: { Authorization: `Bearer ${mockToken}` }
    });
    
    const totalMateriais = materiaisResponse.data.materiais?.length || 0;
    const estoqueBaixo = materiaisResponse.data.materiais?.filter(
      material => parseInt(material.quantidade) <= parseInt(material.quantidadeMinima)
    ).length || 0;
    
    console.log(`‚úÖ Materiais: ${totalMateriais} total, ${estoqueBaixo} com estoque baixo`);

    // Testar endpoint de estat√≠sticas de requisi√ß√µes
    console.log('\nüìã Testando endpoint de estat√≠sticas de requisi√ß√µes...');
    const requisicoesResponse = await axios.get(`${API_BASE_URL}/requisitions/estatisticas`, {
      headers: { Authorization: `Bearer ${mockToken}` }
    });
    
    const stats = requisicoesResponse.data.estatisticas || {};
    console.log(`‚úÖ Requisi√ß√µes: ${stats.total || 0} total`);
    console.log(`   - Pendentes: ${stats.pendentes || 0}`);
    console.log(`   - Aprovadas: ${stats.aprovadas || 0}`);
    console.log(`   - Rejeitadas: ${stats.rejeitadas || 0}`);

    // Testar endpoint de materiais com estoque baixo
    console.log('\n‚ö†Ô∏è Testando endpoint de materiais com estoque baixo...');
    const estoqueBaixoResponse = await axios.get(`${API_BASE_URL}/materials/estoque/baixo`, {
      headers: { Authorization: `Bearer ${mockToken}` }
    });
    
    const materiaisEstoqueBaixo = estoqueBaixoResponse.data.materiais?.length || 0;
    console.log(`‚úÖ Materiais com estoque baixo: ${materiaisEstoqueBaixo}`);

    // Resumo final
    console.log('\nüìä RESUMO DAS ESTAT√çSTICAS:');
    console.log(`   üì¶ Total de Materiais: ${totalMateriais}`);
    console.log(`   üìã Total de Requisi√ß√µes: ${stats.total || 0}`);
    console.log(`   ‚è≥ Requisi√ß√µes Pendentes: ${stats.pendentes || 0}`);
    console.log(`   ‚ö†Ô∏è Materiais com Estoque Baixo: ${estoqueBaixo}`);

    // Verificar se os n√∫meros fazem sentido
    if (totalMateriais > 0 && stats.total >= 0) {
      console.log('\n‚úÖ Estat√≠sticas carregadas com sucesso!');
      console.log('üéØ O dashboard deve estar funcionando corretamente.');
    } else {
      console.log('\n‚ö†Ô∏è Algumas estat√≠sticas est√£o vazias ou zeradas.');
      console.log('üîç Verifique se h√° dados no banco de dados.');
    }

  } catch (error) {
    console.error('\n‚ùå Erro ao testar estat√≠sticas:', error.message);
    
    if (error.response) {
      console.error(`   Status: ${error.response.status}`);
      console.error(`   Dados: ${JSON.stringify(error.response.data, null, 2)}`);
    }
    
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('   1. Verificar se o servidor est√° rodando na porta 3001');
    console.log('   2. Verificar se o token JWT √© v√°lido');
    console.log('   3. Verificar se h√° dados no banco de dados');
    console.log('   4. Verificar logs do servidor para erros');
  }
}

// Executar o teste
if (require.main === module) {
  testDashboardStats();
}

module.exports = { testDashboardStats }; 